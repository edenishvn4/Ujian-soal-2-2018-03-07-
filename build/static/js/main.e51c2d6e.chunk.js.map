{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nama","team","setState","refs","value","_this2","x","axios","get","then","ambilData","console","log","data","player","_this3","map","item","index","name","strPlayer","post","strPosition","img","strThumb","desc","strDescriptionEN","react_default","a","createElement","className","src","alt","ref","type","onInput","klik","onClick","klik2","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e51c2d6e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={nama:'',team:[]}\n  }\n  klik(){\n    this.setState({nama: this.refs.nama.value});\n  }\n  klik2(){\n    var x=this.state.nama;\n    axios.get('https://www.thesportsdb.com/api/v1/json/1/searchplayers.php?t='+x).then((ambilData)=>{\n      console.log(ambilData.data.player);\n      this.setState({\n        team:ambilData.data.player,\n      })\n    })\n  }\n  render() {\n    const data = this.state.team.map((item,index)=>{\n      var name = item.strPlayer;\n      var post = item.strPosition;\n      var img = item.strThumb;\n      var desc = item.strDescriptionEN\n      return <div className=\"row\"><div className=\"col-xs-12 col-lg-12\"><div className=\"panel panel-primary\"><div className=\"panel-heading\"><h4><b>{name}({post})</b></h4></div><div className=\"panel-body\"><div className=\"col-lg-4\"><img src={img} alt=\"ok\"/></div><div className=\"col-lg-8\"><p>{desc}</p></div></div></div></div></div>\n    })\n    return (\n      <div className=\"container\">\n        <center>\n          <h1>Daftar Pemain {this.state.nama}</h1>\n          <div className=\"row\">\n            <div className=\"col-md-8\">\n              <input className=\"form-control\" ref=\"nama\" type=\"text\" onInput={()=>{this.klik();}}/>\n            </div>\n            <div className=\"col-md-4\">\n              <button type=\"submit\" className=\"btn btn-success btn-block\" onClick={()=>{this.klik2();}}>Lihat Daftar</button>\n            </div>\n          </div>\n        </center>\n        <br/>\n        {data}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}